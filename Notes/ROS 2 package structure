-----------------------------------------------------Option 1-----------------------------------------------------------------------------

The structural (Option 1) view of package for ROS 2 in python and C++. These structure is use for beginner level, mini project etc.  

-------------------------------Code Structure For python file---------------------------

my_python_package/
â”œâ”€â”€ my_python_package/
â”‚   â”œâ”€â”€ __init__.py
â”‚   â”œâ”€â”€ my_node.py               # Your ROS 2 Python node(s)
â”‚
â”œâ”€â”€ launch/
â”‚   â”œâ”€â”€ my_launch.py             # Python-based launch file
â”‚   â””â”€â”€ my_launch.xml            # XML-based launch file
â”‚
â”œâ”€â”€ config/
â”‚   â”œâ”€â”€ rviz_config.rviz         # (Example) RViz config
â”‚   â””â”€â”€ gazebo_config.yaml       # (Example) Gazebo config
â”‚
â”œâ”€â”€ resource/
â”‚   â””â”€â”€ my_python_package        # Required for ament (empty file with package name)
â”‚
â”œâ”€â”€ setup.py                     # Python setup script
â”œâ”€â”€ setup.cfg                    # Build metadata
â”œâ”€â”€ package.xml                  # Package manifest
â”œâ”€â”€ test/                        # (Optional) for test scripts




-------------------------------Code Structure For C++ file---------------------------


my_cpp_package/
â”œâ”€â”€ src/
â”‚   â””â”€â”€ my_node.cpp              # Your ROS 2 C++ node(s)
â”‚
â”œâ”€â”€ include/
â”‚   â””â”€â”€ my_cpp_package/
â”‚       â””â”€â”€ my_node.hpp          # Header file(s)
â”‚
â”œâ”€â”€ launch/
â”‚   â”œâ”€â”€ my_launch.py             # Python-based launch file
â”‚   â””â”€â”€ my_launch.xml            # XML-based launch file
â”‚
â”œâ”€â”€ config/
â”‚   â”œâ”€â”€ rviz_config.rviz         # (Example) RViz config
â”‚   â””â”€â”€ gazebo_config.yaml       # (Example) Gazebo config
â”‚
â”œâ”€â”€ resource/
â”‚   â””â”€â”€ my_cpp_package           # Required for ament (empty file with package name)
â”‚
â”œâ”€â”€ CMakeLists.txt               # CMake build instructions
â”œâ”€â”€ package.xml                  # Package manifest
â”œâ”€â”€ test/                        # (Optional) for test scripts



-----------------------------------------------------Option 2-----------------------------------------------------------------------------

Centralized structure (Option 2) that is ideal for scaling, reuse, and industry-quality projects.
Below is a well-structured layout of a Balanced Centralized ROS 2 Workspace â€” which you can memorize, reuse, and build upon for future scalable and professional projects.

ros2_ws/
â”œâ”€â”€ src/
â”‚   â”œâ”€â”€ launch_package/           # ðŸ“¦ Centralized launch files
â”‚   â”‚   â”œâ”€â”€ robot1/
â”‚   â”‚   â”‚   â”œâ”€â”€ robot1.launch.py
â”‚   â”‚   â”‚   â””â”€â”€ robot1.launch.xml
â”‚   â”‚   â”œâ”€â”€ robot2/
â”‚   â”‚   â”‚   â””â”€â”€ robot2.launch.py
â”‚   â”‚   â””â”€â”€ common/
â”‚   â”‚       â””â”€â”€ bringup.launch.py
â”‚   â”‚
â”‚   â”œâ”€â”€ config_package/           # ðŸ“¦ Centralized config files
â”‚   â”‚   â”œâ”€â”€ robot1/
â”‚   â”‚   â”‚   â”œâ”€â”€ urdf/
â”‚   â”‚   â”‚   â”‚   â””â”€â”€ robot1.urdf.xacro
â”‚   â”‚   â”‚   â”œâ”€â”€ rviz/
â”‚   â”‚   â”‚   â”‚   â””â”€â”€ robot1.rviz
â”‚   â”‚   â”‚   â””â”€â”€ gazebo/
â”‚   â”‚   â”‚       â””â”€â”€ robot1_gazebo.yaml
â”‚   â”‚   â”œâ”€â”€ robot2/
â”‚   â”‚   â”‚   â””â”€â”€ ...
â”‚   â”‚   â””â”€â”€ common/
â”‚   â”‚       â”œâ”€â”€ map/
â”‚   â”‚       â”œâ”€â”€ params/
â”‚   â”‚       â””â”€â”€ worlds/
â”‚   â”‚
â”‚   â”œâ”€â”€ robot1_package/           # ðŸ¤– Robot 1 software (C++ or Python)
â”‚   â”‚   â”œâ”€â”€ src/                  #   For C++ nodes
â”‚   â”‚   â”‚   â””â”€â”€ robot1_node.cpp
â”‚   â”‚   â”œâ”€â”€ robot1_package/       #   For Python nodes
â”‚   â”‚   â”‚   â””â”€â”€ robot1_node.py
â”‚   â”‚   â”œâ”€â”€ include/
â”‚   â”‚   â”œâ”€â”€ CMakeLists.txt
â”‚   â”‚   â”œâ”€â”€ package.xml
â”‚   â”‚   â””â”€â”€ setup.py / setup.cfg (if Python)
â”‚   â”‚
â”‚   â”œâ”€â”€ robot2_package/           # ðŸ¤– Robot 2 software
â”‚   â”‚   â””â”€â”€ ...
â”‚   â”‚
â”‚   â”œâ”€â”€ interfaces_package/       # ðŸ”— Custom msg/srv/action interfaces
â”‚   â”‚   â”œâ”€â”€ msg/
â”‚   â”‚   â”œâ”€â”€ srv/
â”‚   â”‚   â”œâ”€â”€ CMakeLists.txt
â”‚   â”‚   â””â”€â”€ package.xml
â”‚
â”œâ”€â”€ install/                      # âœ… Built workspace
â”œâ”€â”€ build/                        # ðŸ”§ Build cache
â”œâ”€â”€ log/                          # ðŸ“Š Logs


colcon build --symlink-install
source install/setup.bash
ros2 launch launch_package robot1/robot1.launch.py



-----------------------------------------Createing a new setup for vscode (Option 2)-----------------------------------

>> mkdir ros2_ws
>> cd ros2_ws
	>> mkdir scr
>> Colcon build --symlink-install
>> source install/setup.bash
	>> (cd scr/)
		>> ros2 pkg create --build-type  ament_cmake launch_package
		>> rm -rf include/ src/	









